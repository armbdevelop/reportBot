import React, { useState, useEffect, useCallback } from 'react';
import { MapPin, Send, RefreshCw, Home, Plus, Clock, User } from 'lucide-react';
import { MemoizedInput } from '../common/MemoizedInput';
import { ValidationAlert } from '../common/ValidationAlert';
import { ConfirmationModal } from '../common/ConfirmationModal';
import { useAutoSave } from '../../hooks/useAutoSave';
import { useFormData } from '../../hooks/useFormData';
import { getCurrentMSKTime } from '../../utils/dateUtils';

export const TransferForm = ({
  isLoading,
  setIsLoading,
  validationErrors,
  setValidationErrors,
  showValidationErrors,
  showNotification,
  clearCurrentDraft,
  currentDraftId,
  loadDraft,
  saveDraft,
  goToMenu,
  locations,
  apiService
}) => {
  const [formData, setFormData] = useState({
    locationFrom: '',
    locationTo: '',
    shift: '',
    cashierName: '',
    writeoff_or_transfer: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è',
    reportDate: new Date().toISOString().split('T')[0], // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç
    reportTime: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }), // HH:MM —Ñ–æ—Ä–º–∞—Ç
    transfers: ['', '', '', ''] // –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
  });

  const [showClearModal, setShowClearModal] = useState(false);
  const { handleNumberInput } = useFormData(validationErrors, setValidationErrors);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (currentDraftId) {
      const draftData = loadDraft(currentDraftId);
      if (draftData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É transfers, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
        if (draftData.transfers && Array.isArray(draftData.transfers)) {
          draftData.transfers = draftData.transfers.map(item => {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            if (typeof item === 'object' && item !== null) {
              return ''; // –û—á–∏—â–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return typeof item === 'string' ? item : '';
          });
        } else {
          // –ï—Å–ª–∏ transfers –Ω–µ –º–∞—Å—Å–∏–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          draftData.transfers = ['', '', '', ''];
        }
        setFormData(draftData);
      }
    }
  }, [currentDraftId, loadDraft]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const autoSaveFunction = useCallback(async (data) => {
    const hasTransfers = data.transfers.some(item => item.trim() !== '');

    if (data.locationFrom || data.locationTo || hasTransfers) {
      await saveDraft('transfer', data);
    }
  }, [saveDraft]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 300–º—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ–∫—É—Å–∞
  useAutoSave(formData, autoSaveFunction, 300);

  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (validationErrors[field]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  }, [validationErrors, setValidationErrors]);

  const handleArrayChange = useCallback((arrayName, index, field, value) => {
    setFormData(prev => {
      const newArray = [...prev[arrayName]];
      newArray[index] = { ...newArray[index], [field]: value };
      return { ...prev, [arrayName]: newArray };
    });
  }, []);

  const handleTransferChange = useCallback((index, value) => {
    setFormData(prev => {
      const newTransfers = [...prev.transfers];
      newTransfers[index] = value;
      return { ...prev, transfers: newTransfers };
    });
  }, []);

  const addArrayItem = useCallback((arrayName) => {
    setFormData(prev => ({
      ...prev,
      [arrayName]: [...prev[arrayName], { name: '', weight: '', unit: '', reason: '' }]
    }));
  }, []);

  const addTransferItem = useCallback(() => {
    setFormData(prev => ({
      ...prev,
      transfers: [...prev.transfers, '']
    }));
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º—ã
  const handleClearForm = useCallback(() => {
    if (currentDraftId) {
      clearCurrentDraft();
    }
    setValidationErrors({});
    window.location.reload();
  }, [currentDraftId, clearCurrentDraft, setValidationErrors]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã
  const validateDate = useCallback((dateString) => {
    if (!dateString) return false;

    const date = new Date(dateString);
    const today = new Date();
    const minDate = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate());
    const maxDate = new Date(today.getFullYear() + 1, today.getMonth(), today.getDate());

    return date >= minDate && date <= maxDate;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  const validateTime = useCallback((timeString) => {
    if (!timeString) return false;

    const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
    return timeRegex.test(timeString);
  }, []);

  const handleSubmit = useCallback(async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = {};

    if (!formData.locationFrom) errors.locationFrom = '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é "–û—Ç–∫—É–¥–∞"';
    if (!formData.locationTo) errors.locationTo = '–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é "–ö—É–¥–∞"';
    if (formData.locationFrom === formData.locationTo) errors.locationTo = '–õ–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏';
    if (!formData.shift) errors.shift = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É';
    if (!formData.cashierName.trim()) errors.cashierName = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Å—Å–∏—Ä–∞';

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if (!formData.reportDate) {
      errors.reportDate = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É';
    } else if (!validateDate(formData.reportDate)) {
      errors.reportDate = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ–¥–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if (!formData.reportTime) {
      errors.reportTime = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è';
    } else if (!validateTime(formData.reportTime)) {
      errors.reportTime = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú';
    }


    if (Object.keys(errors).length > 0) {
      showValidationErrors(errors);
      return;
    }

    setIsLoading(true);

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è API
      const apiFormData = new FormData();

      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      apiFormData.append('location_from', formData.locationFrom);
      apiFormData.append('location_to', formData.locationTo);
      apiFormData.append('shift_type', formData.shift === '–£—Ç—Ä–æ' ? 'morning' : 'night');
      apiFormData.append('cashier_name', formData.cashierName);
      apiFormData.append('writeoff_or_transfer', formData.writeoff_or_transfer);
      apiFormData.append('report_date', formData.reportDate);
      apiFormData.append('report_time', formData.reportTime);

      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
      const writeoffs = [];
      const transfers = formData.transfers
        .filter(item => item.trim() !== '')
        .map((item, index) => ({
          name: item,
          unit: '—à—Ç',
          weight: 1,
          reason: `–ü–æ–∑–∏—Ü–∏—è ${index + 1}`
        }));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
      apiFormData.append('writeoffs_json', JSON.stringify(writeoffs));

      if (transfers.length > 0) {
        apiFormData.append('transfers_json', JSON.stringify(transfers));
      }

      const result = await apiService.createWriteOffReport(apiFormData);
      clearCurrentDraft();
      showNotification('success', '–ê–∫—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', '–ê–∫—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
      showNotification('error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  }, [formData, apiService, showNotification, showValidationErrors, clearCurrentDraft, setIsLoading]);

  return (
    <>
      <div className="min-h-screen bg-gray-50 text-gray-900 p-4">
        <div className="max-w-md mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <button
              onClick={goToMenu}
              className="p-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors shadow-sm"
              disabled={isLoading}
            >
              <Home size={20} className="text-gray-600" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-blue-600">‚ÜîÔ∏è –ê–∫—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</h1>
              {currentDraftId && (
                <p className="text-sm text-blue-600">‚úì –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</p>
              )}
            </div>
          </div>

          {/* –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
          <ValidationAlert errors={validationErrors} />

          {/* Location From */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <MapPin size={16} className="text-red-500" />
              üìç –û—Ç–∫—É–¥–∞?
            </label>
            <div className="space-y-2">
              {locations.map(loc => (
                <button
                  key={loc}
                  onClick={() => handleInputChange('locationFrom', loc)}
                  disabled={isLoading}
                  className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.locationFrom === loc 
                      ? 'bg-blue-500 border-blue-500 text-white shadow-md' 
                      : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                  } ${validationErrors.locationFrom ? 'border-red-400 bg-red-50' : ''}`}
                >
                  –û—Ç–ø—Ä–∞–≤–ª—è—é —Å {loc}
                </button>
              ))}
            </div>
          </div>

          {/* Location To */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <MapPin size={16} className="text-red-500" />
              üìç –ö—É–¥–∞?
            </label>
            <div className="space-y-2">
              {locations.map(loc => (
                <button
                  key={loc}
                  onClick={() => handleInputChange('locationTo', loc)}
                  disabled={isLoading}
                  className={`w-full p-3 text-left rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.locationTo === loc 
                      ? 'bg-blue-500 border-blue-500 text-white shadow-md' 
                      : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                  } ${validationErrors.locationTo ? 'border-red-400 bg-red-50' : ''}`}
                >
                  –ù–∞ —Ç–æ—á–∫—É {loc}
                </button>
              ))}
            </div>
          </div>

          {/* Shift Selection */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <Clock size={16} className="text-blue-500" />
              üïê –°–º–µ–Ω–∞:
            </label>
            <div className="grid grid-cols-2 gap-2">
              {['–£—Ç—Ä–æ', '–ù–æ—á—å'].map(shift => (
                <button
                  key={shift}
                  onClick={() => handleInputChange('shift', shift)}
                  disabled={isLoading}
                  className={`p-3 text-center rounded-lg border transition-colors disabled:opacity-50 ${
                    formData.shift === shift 
                      ? 'bg-blue-500 border-blue-500 text-white shadow-md' 
                      : 'bg-white border-gray-300 hover:border-gray-400 text-gray-700 shadow-sm hover:shadow-md'
                  } ${validationErrors.shift ? 'border-red-400 bg-red-50' : ''}`}
                >
                  {shift}
                </button>
              ))}
            </div>
            {validationErrors.shift && (
              <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è {validationErrors.shift}</p>
            )}
          </div>

          {/* Cashier Name */}
          <div className="mb-4">
            <label className="flex items-center gap-2 text-sm font-medium mb-2 text-gray-700">
              <User size={16} className="text-blue-500" />
              üë§ –ò–º—è –∫–∞—Å—Å–∏—Ä–∞:
            </label>
            <MemoizedInput
              type="text"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–∞—Å—Å–∏—Ä–∞"
              value={formData.cashierName}
              onChange={(e) => handleInputChange('cashierName', e.target.value)}
              disabled={isLoading}
              className={`w-full p-3 border rounded-lg transition-colors disabled:opacity-50 ${
                validationErrors.cashierName 
                  ? 'border-red-400 bg-red-50 text-red-700' 
                  : 'bg-white border-gray-300 focus:border-blue-500 focus:outline-none text-gray-700'
              }`}
              name="cashier-name"
              id="cashier-name"
            />
            {validationErrors.cashierName && (
              <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è {validationErrors.cashierName}</p>
            )}
          </div>

          {/* Date & Time */}
          <div className="mb-4">
            <label className="text-sm font-medium block mb-2 text-gray-700">üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞</label>
            <input
              type="date"
              value={formData.reportDate}
              onChange={(e) => handleInputChange('reportDate', e.target.value)}
              disabled={isLoading}
              min={new Date(new Date().getFullYear() - 1, new Date().getMonth(), new Date().getDate()).toISOString().split('T')[0]}
              max={new Date(new Date().getFullYear() + 1, new Date().getMonth(), new Date().getDate()).toISOString().split('T')[0]}
              className={`w-full p-3 border rounded-lg transition-colors disabled:opacity-50 ${
                validationErrors.reportDate 
                  ? 'border-red-400 bg-red-50 text-red-700' 
                  : 'bg-white border-gray-300 focus:border-blue-500 focus:outline-none text-gray-700'
              }`}
              name="report-date"
              id="report-date"
            />
            {validationErrors.reportDate && (
              <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è {validationErrors.reportDate}</p>
            )}
          </div>

          <div className="mb-4">
            <label className="text-sm font-medium block mb-2 text-gray-700">‚è∞ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞</label>
            <input
              type="time"
              value={formData.reportTime}
              onChange={(e) => handleInputChange('reportTime', e.target.value)}
              disabled={isLoading}
              step="60"
              className={`w-full p-3 border rounded-lg transition-colors disabled:opacity-50 ${
                validationErrors.reportTime 
                  ? 'border-red-400 bg-red-50 text-red-700' 
                  : 'bg-white border-gray-300 focus:border-blue-500 focus:outline-none text-gray-700'
              }`}
              name="report-time"
              id="report-time"
            />
            {validationErrors.reportTime && (
              <p className="text-xs text-red-600 mt-1">‚ö†Ô∏è {validationErrors.reportTime}</p>
            )}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ */}
          <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg">
            <div className="flex items-center gap-2 mb-3">
              <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-bold">!</span>
              </div>
              <h3 className="text-lg font-bold text-blue-700">–ü—Ä–∞–≤–∏–ª–æ –ø–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è–º —Ç–æ–≤–∞—Ä–∞</h3>
            </div>

            <div className="space-y-3 text-sm text-gray-700">
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                <div>
                  <span className="font-semibold text-green-700">–ï—Å–ª–∏ —Ç–≤–æ—è —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä</span> –≤ –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É ‚Äî
                  <span className="font-semibold"> –∑–∞–ø–æ–ª–Ω—è–µ—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–π —Ñ–æ—Ä–º–µ</span>
                </div>
              </div>

              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0"></div>
                <div>
                  <span className="font-semibold text-orange-700">–ï—Å–ª–∏ —Ç–≤–æ—è —Ç–æ—á–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–≤–∞—Ä</span> ‚Äî
                  <span className="font-semibold"> –≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ—à—å</span>.
                  –û—Ç–º–µ—á–∞–µ—à—å —ç—Ç–æ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ—ë–º –æ—Ç—á—ë—Ç–µ –æ –ø—Ä–∏—ë–º–∞ —Ç–æ–≤–∞—Ä–∞, –≤ –±–ª–æ–∫–µ ¬´–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–æ–π —Ç–æ—á–∫–∏ –∫ –≤–∞–º¬ª
                </div>
              </div>
            </div>

            <div className="mt-3 p-2 bg-blue-100 rounded border-l-4 border-blue-400">
              <p className="text-xs text-blue-800 font-medium">
                üí° –ü–æ–º–Ω–∏: –∫–∞–∂–¥–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º!
              </p>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é */}
          <div className="mb-6 p-4 bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-lg">
            <div className="flex items-center gap-2 mb-3">
              <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-bold">‚ö†</span>
              </div>
              <h3 className="text-lg font-bold text-orange-700">–í–Ω–∏–º–∞–Ω–∏–µ!</h3>
            </div>

            <div className="space-y-3 text-sm text-gray-700">
              <p className="font-semibold text-orange-800">
                –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
              </p>
              <p>
                <span className="font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ - –≤–µ—Å/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.</span>
              </p>

              <div className="bg-orange-100 p-3 rounded-lg border-l-4 border-orange-400">
                <p className="text-xs font-medium text-orange-800 mb-2">–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:</p>
                <div className="space-y-1 text-xs text-orange-700">
                  <p>‚Ä¢ –ú–∞–π–æ–Ω–µ–∑ - 10 –ø–∞—á–µ–∫</p>
                  <p>‚Ä¢ –õ–µ–ø–µ—à–∫–∏ 200 —à—Ç—É–∫</p>
                  <p>‚Ä¢ –°—ã—Ä–Ω—ã–π —Å–æ—É—Å 2 –∫–≥</p>
                  <p>‚Ä¢ –°—Ç—Ä–∏–ø—Å—ã 1 –ø–∞—á–∫—É</p>
                  <p>‚Ä¢ –°–ø–µ—Ü–∏–∏ 2 –∫–≥ –∏ —Ç–¥.</p>
                </div>
              </div>
            </div>
          </div>

          {/* Transfers Section */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-blue-600 mb-3">‚ÜîÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</h3>
            <p className="text-sm text-gray-600 mb-3">–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ –∫–∞–∂–¥–æ–º –ø–æ–ª–µ</p>
            {formData.transfers.map((item, index) => (
              <div key={index} className="mb-3">
                <textarea
                  placeholder="–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä, —Å–∫–æ–ª—å–∫–æ –∫–≥\—à—Ç –∏–ª–∏ –ø–∞—á–µ–∫"
                  value={item}
                  onChange={(e) => handleTransferChange(index, e.target.value)}
                  disabled={isLoading}
                  rows={3}
                  className={`w-full p-3 border rounded-lg transition-colors disabled:opacity-50 resize-none ${
                    'bg-white border-gray-300 focus:border-blue-500 focus:outline-none text-gray-700'
                  }`}
                  name={`transfer-${index}`}
                  id={`transfer-${index}`}
                />
              </div>
            ))}
            <button
              onClick={addTransferItem}
              disabled={isLoading}
              className="w-full p-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors flex items-center justify-center gap-2 disabled:opacity-50 shadow-md hover:shadow-lg"
            >
              <Plus size={16} />
              –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–ª–µ
            </button>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-3 mb-6">
            <button
              onClick={() => setShowClearModal(true)}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-white border border-gray-300 hover:bg-gray-50 rounded-lg transition-colors disabled:opacity-50 text-gray-700 shadow-sm hover:shadow-md"
            >
              <RefreshCw size={18} />
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={handleSubmit}
              disabled={isLoading}
              className="flex-1 flex items-center justify-center gap-2 p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-semibold disabled:opacity-50 shadow-md hover:shadow-lg"
            >
              {isLoading ? (
                <>
                  <RefreshCw size={18} className="animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                <>
                  <Send size={18} />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
                </>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ */}
      <ConfirmationModal
        isOpen={showClearModal}
        onClose={() => setShowClearModal(false)}
        onConfirm={handleClearForm}
        title="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É"
        message="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã."
        confirmText="–û—á–∏—Å—Ç–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        type="warning"
      />
    </>
  );
};

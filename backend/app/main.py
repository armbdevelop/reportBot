from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from app.api import api_router
from fastapi.middleware.cors import CORSMiddleware
from app.services import TelegramService
from app.core.config import settings
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy import text
from app.core.database import DatabaseHelper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
cleanup_logger = logging.getLogger("cleanup")
cleanup_logger.setLevel(logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
database_url = f"{settings.DB_DRIVER}://{settings.DB_USER}:{settings.DB_PASSWORD}@{settings.DB_HOST}:{settings.DB_PORT}/{settings.DB_NAME}"
db_helper = DatabaseHelper(
    url=database_url,
    echo=settings.DB_ECHO,
    echo_pool=settings.DB_ECHO_POOL,
    max_overflow=settings.DB_MAX_OVERFLOW,
    pool_size=settings.DB_POOL_SIZE,
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None


async def cleanup_old_records() -> None:
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –æ—Ç—á–µ—Ç–æ–≤."""
    cutoff_date = datetime.now() - timedelta(days=90)
    cleanup_logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ {cutoff_date.strftime('%Y-%m-%d %H:%M:%S')}")

    async for session in db_helper.session_getter():
        try:
            models_to_clean = [
                ('shift_reports', 'created_at'),
                ('reportongoods', 'date'),
                ('dailyinventory', 'created_at'),
                ('dailyinventoryv2', 'created_at'),
                ('writeofftransfer', 'created_at'),
                ('shift_reports', 'created_at'),
            ]

            total_deleted = 0

            for table_name, date_field in models_to_clean:
                try:
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    count_query = text(f"SELECT COUNT(*) FROM {table_name} WHERE {date_field} < :cutoff_date")
                    result = await session.execute(count_query, {"cutoff_date": cutoff_date})
                    count_to_delete = result.scalar()

                    if count_to_delete > 0:
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                        delete_query = text(f"DELETE FROM {table_name} WHERE {date_field} < :cutoff_date")
                        await session.execute(delete_query, {"cutoff_date": cutoff_date})
                        cleanup_logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count_to_delete} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}")
                        total_deleted += count_to_delete
                    else:
                        cleanup_logger.info(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ {table_name} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

                except Exception as e:
                    cleanup_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {str(e)}")
                    continue

            await session.commit()
            cleanup_logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_deleted}")

        except Exception as e:
            cleanup_logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            await session.rollback()
            raise
        finally:
            await session.close()


async def cleanup_old_files() -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads."""
    from pathlib import Path

    cleanup_logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")

    cutoff_timestamp = (datetime.now() - timedelta(days=90)).timestamp()
    uploads_dir = Path("uploads")

    if not uploads_dir.exists():
        cleanup_logger.warning("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    total_deleted_files = 0

    for subdir in uploads_dir.iterdir():
        if subdir.is_dir():
            for file_path in subdir.glob("*"):
                if file_path.is_file():
                    try:
                        if file_path.stat().st_mtime < cutoff_timestamp:
                            file_path.unlink()
                            cleanup_logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                            total_deleted_files += 1
                    except Exception as e:
                        cleanup_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")

    cleanup_logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_deleted_files}")


async def daily_cleanup_task() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏."""
    cleanup_logger.info("üîÑ –ó–ê–ü–£–°–ö –ï–ñ–ï–î–ù–ï–í–ù–û–ô –û–ß–ò–°–¢–ö–ò")

    try:
        await cleanup_old_records()
        await cleanup_old_files()
        cleanup_logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        cleanup_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {str(e)}")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global scheduler

    # Startup
    print("üöÄ –ó–∞–ø—É—Å–∫ ReportBot API...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —Å–µ—Ä–≤–∏—Å
    telegram_service = TelegramService()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Ö—É–∫ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω URL
    if settings.WEBHOOK_URL:
        print(f"üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Ö—É–∫–∞: {settings.WEBHOOK_URL}")
        success = await telegram_service.set_webhook(settings.WEBHOOK_URL)
        if success:
            print("‚úÖ –í–µ–±-—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-—Ö—É–∫–∞")
    else:
        print("‚ö†Ô∏è  WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω, –≤–µ–±-—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        func=daily_cleanup_task,
        trigger=CronTrigger(hour=0, minute=0, second=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
        id='daily_cleanup',
        name='–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π',
        replace_existing=True,
        max_instances=1,
    )
    scheduler.start()
    print("üßπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00)")

    print("‚úÖ ReportBot API –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    yield

    # Shutdown
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ReportBot API...")
    if scheduler:
        scheduler.shutdown()
        print("üßπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    await db_helper.dispose()
    print("‚úÖ ReportBot API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


app = FastAPI(
    title="ReportBot API",
    description="API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∫–∞—Ñ–µ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram",
    version="1.0.0",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API —Ä–æ—É—Ç—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api
app.include_router(api_router, prefix="/api")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")
